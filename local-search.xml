<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JS笔记</title>
    <link href="/2022/04/25/js%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/04/25/js%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="JS笔记"><a href="#JS笔记" class="headerlink" title="JS笔记"></a>JS笔记</h1><h2 id="浏览器执行JS：渲染引擎-JS引擎"><a href="#浏览器执行JS：渲染引擎-JS引擎" class="headerlink" title="浏览器执行JS：渲染引擎 JS引擎"></a>浏览器执行JS：渲染引擎 JS引擎</h2><h3 id="浏览器主要是以JS引擎来执行JS代码"><a href="#浏览器主要是以JS引擎来执行JS代码" class="headerlink" title="浏览器主要是以JS引擎来执行JS代码"></a>浏览器主要是以JS引擎来执行JS代码</h3><h2 id="JS组成"><a href="#JS组成" class="headerlink" title="JS组成:"></a>JS组成:</h2><h3 id="ECMAScript-js语法-Javascript-网景公司）-amp-Jscript（微软公司）原欧洲计算机制造商协会"><a href="#ECMAScript-js语法-Javascript-网景公司）-amp-Jscript（微软公司）原欧洲计算机制造商协会" class="headerlink" title="ECMAScript(js语法): Javascript(网景公司）&amp;Jscript（微软公司）原欧洲计算机制造商协会"></a>ECMAScript(js语法): Javascript(网景公司）&amp;Jscript（微软公司）原欧洲计算机制造商协会</h3><h3 id="DOM-页面文档对象模型-是W3C组织推荐的处理可扩展标记语言的标准编程接口-可以对页面上的各种元素进行操作"><a href="#DOM-页面文档对象模型-是W3C组织推荐的处理可扩展标记语言的标准编程接口-可以对页面上的各种元素进行操作" class="headerlink" title="DOM(页面文档对象模型) 是W3C组织推荐的处理可扩展标记语言的标准编程接口 可以对页面上的各种元素进行操作"></a>DOM(页面文档对象模型) 是W3C组织推荐的处理可扩展标记语言的标准编程接口 可以对页面上的各种元素进行操作</h3><h3 id="BOM-浏览器对象模型-对浏览器窗口进行操作"><a href="#BOM-浏览器对象模型-对浏览器窗口进行操作" class="headerlink" title="BOM(浏览器对象模型) 对浏览器窗口进行操作"></a>BOM(浏览器对象模型) 对浏览器窗口进行操作</h3><h2 id="三种书写位置："><a href="#三种书写位置：" class="headerlink" title="三种书写位置："></a>三种书写位置：</h2><p><strong>行内式 内嵌式 外部JS样式</strong></p><p>##注释：<br><strong>单行注释 ctrl +/</strong><br><strong>多行注释 ctrl shift /</strong></p><p>##输入与输出：</p><p><strong>浏览器弹出警示框</strong></p><div class="code-wrapper"><pre><code class="hljs">alert(&#39;&#39;)</code></pre></div><p><strong>浏览器控制台打印输出信息 控制台输出(开发人员查看 F12)</strong></p><div class="code-wrapper"><pre><code class="hljs">console.log(&#39;&#39;) </code></pre></div><p><strong>浏览器弹出输入框用户可输入（接收用户输入的数据）</strong></p><div class="code-wrapper"><pre><code class="hljs">prompt(&#39;&#39;)</code></pre></div><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><strong>装东西的盒子 用于存放数据的容器 通过变量获取数据 更改数据是程序在内存中申请的一块用来存放数据的空间</strong></p><p><strong>变量的使用</strong></p><ul><li>声明 var age; (variable) 通过变量来访问数据</li><li>赋值 age=10 </li><li>输出结果 console.log(age)</li><li>变量的初始化 var age =18 声明一个变量并赋值</li><li>存储变量 var  age = prompt(‘’) 输出 alert(‘’) </li></ul><p><strong>变量的语法扩展</strong></p><p>1.更新变量 一个变量被重新赋值后 它原有的值会被覆盖 变量值将以最后一次赋的值为准</p><div class="code-wrapper"><pre><code class="hljs">var age = 18;age = 82; //最后的结果是82因为18被覆盖掉了</code></pre></div><p>2.声明多个变量 只需一个 var 之间用逗号隔开</p><div class="code-wrapper"><pre><code class="hljs">var age=10, name=&#39;zs&#39;, sex =2;</code></pre></div><p>3.声明变量特殊情况</p><div class="code-wrapper"><pre><code class="hljs">var age; console.log(age); //只声明不赋值undefined;console.log(age); //不声明 不赋值直接使用  报错age =10; console.log(age) //不声明只赋值   10</code></pre></div><p><strong>变量命名规范</strong></p><ul><li><strong>由字母（A-Z a-z)、数字(0-9)、下划线(_)、美元符号($)</strong></li><li><strong>严格区分大小写</strong></li><li><strong>不能以数字开头</strong></li><li><strong>不能是关键字、保留字</strong></li><li><strong>变量名必须有意义</strong></li><li><strong>遵守驼峰命名法，首字母小写，后面单词的首字母需要大写</strong></li></ul><p><strong>数据类型</strong></p><p><strong>js是动态语言:</strong></p><blockquote><p><em><strong>不同数据占用的空间不同 为了便于把数据分成所需内存大小不同的数据，</strong></em><br><em><strong>充分利用存储空间，于是定义了不同的数据类型</strong></em></p></blockquote><p><strong>变量的数据类型</strong></p><blockquote><p>javascript的数据类型是只有程序在运行过程中根据等号右边的值来确定的</p></blockquote><div class="code-wrapper"><pre><code class="hljs">var age = 10;//这是一个数字型var areyouok =&#39;是的&#39;；//这是一个字符串</code></pre></div><blockquote><p>js拥有动态类型 同时也意味着相同的变量可用作不同的类型</p></blockquote><div class="code-wrapper"><pre><code class="hljs">var x = 6; //x为数字var x = &quot;bill&quot; //x为字符串</code></pre></div><p><strong>js简单数据类型</strong></p><blockquote><p><strong>Number 数字型 包含整型值和浮点型值  默认值为0</strong></p><p><strong>数字型进制 在JS中八进制前面加0，十六进制前面加0x</strong></p></blockquote><blockquote><p><strong>数字型范围</strong><br><strong>最大值 Number.MAX_VALUE</strong><br><strong>最小值 Number.MIN_VALUE</strong></p></blockquote><blockquote><p><strong>数字型三个特殊值</strong><br><strong>alert(Infinity); //Infinity 无穷大</strong><br><strong>alert(-Infinty); //-Infinty 无穷小</strong><br><strong>alert(NaN); //NaN 代表一个非数值</strong><br><strong>isNaN() 用来判断一个变量是否为非数值的类型 返回ture false</strong></p></blockquote><blockquote><p><strong>Boolean 布尔值类型 ture false 默认值为false</strong><br><strong>ture参与加法运算当作1 false当作0</strong></p></blockquote><blockquote><p><strong>String 字符串类型 都带有引号  默认为””</strong><br>字符串型 可以是引号中的任意文本 加双引号或者单引号</p></blockquote><div class="code-wrapper"><pre><code class="hljs">var strMsg= &quot;我爱天安门~&quot;; //使用双引号表示字符串var strMsg2= &#39;我爱吃猪蹄~&#39;; //使用单引号表示字符串</code></pre></div><p><strong>常见错误</strong></p><div class="code-wrapper"><pre><code class="hljs">var strMsg3= 我爱大肘子; // 报错，没使用引号 会被认为是js代码  </code></pre></div><blockquote><p>一般推荐使用单引号 可以用单引号嵌套双引号 或者双引号嵌套单引号（外双内单，外单内双）</p></blockquote><div class="code-wrapper"><pre><code class="hljs">var strMsg = &#39;我是“高富帅”程序员&#39;; //可以用&#39;&#39;包含&quot;&quot;var strMsg2 = “我是‘高富帅’程序员”; //也可以用&quot;&quot;包含&#39;&#39;</code></pre></div><p><strong>常见错误</strong></p><div class="code-wrapper"><pre><code class="hljs">var badQuotes = &#39;what on earth?&quot;; //报错，不能单双引号搭配</code></pre></div><p><strong>字符串转义符</strong></p><blockquote><p>转义符都是\开头的<br>\n 换行符 newline<br>\ 斜杠\<br>&#39; ‘单引号<br>&quot; “双引号<br>\t tab缩进<br>\b 空格blank</p></blockquote><p><strong>字符串长度</strong></p><blockquote><p>通过字符串的length属性可以获取整个字符串的长度</p></blockquote><p><strong>字符串的拼接”+”</strong></p><blockquote><p><strong>字符串+任何类型=拼接之后的新字符串</strong></p></blockquote><div class="code-wrapper"><pre><code class="hljs">// 字符串&quot;相加&quot;alert(&#39;hello&#39;+&#39;&#39;&#39;world&#39;); //hello world// 数值字符串&quot;相加&quot;alert(&#39;100&#39;+&#39;100&#39;); //100100// 数值字符串+数值alert(&#39;11&#39;+12); //1112</code></pre></div><blockquote><p><strong>口诀：数值相加，字符相连</strong></p></blockquote><p><strong>字符串拼接加强</strong></p><blockquote><p>变量不要写到字符串里面，是通过和字符串相连的方式实现的</p></blockquote><blockquote><p>Undefined 声明了变量但没有给值 默认为undefined</p></blockquote><p><strong>未定义数据类型</strong></p><blockquote><p>undefined与数字相加=NaN<br>Null 声明了变量但为空值  默认为Null<br>（js用户交互：1提示用户输入 2程序内部处理 3输出结果）</p></blockquote><p><strong>检测数据类型:</strong></p><div class="code-wrapper"><pre><code class="hljs">console.log(typrof var);(prompt 取过来的是字符型的)</code></pre></div><p><strong>字面量</strong></p><blockquote><p>是源代码中一个固定值的表示法 字面量就是表示如何表达这个值</p></blockquote><blockquote><p>数字字面量：8，9，10<br>字符串字面量：’黑马程序员’,”大前端”<br>布尔字面量：true false</p></blockquote><p><strong>数据类型转换</strong></p><blockquote><p>把一种数据类型的变量转换成另外一种数据类型</p></blockquote><p><strong>常用的3种转换</strong></p><div class="code-wrapper"><pre><code class="hljs">//转换为字符串:toString()； var num=1;alert(num.toString());//转换为数字型:String()强制转换  var num=1;alert(String());//加号拼接字符串 var num=1; alert(num + &quot;字符串&quot;)；//（第三种方法称之为隐式转换）//转换为数字型：parseInt(string)函数: parseInt(&#39;79&#39;); 会去掉单位 取整parseFloat(string) 函数 parseFloat(&#39;78.21&#39;); 得到小数Number()强制转换函数 Number(&#39;12&#39;)//js隐式转换(- * /) &#39;12&#39;-0; //利用了算数运算//转换为布尔型Boolean()函数 Boolean(&#39;ture&#39;);//代表空、否定的值会被转换为false 其他值都会被转换为ture</code></pre></div><ul><li>解释型语言（js）</li><li>编译型语言（java)</li></ul><p><strong>编译器翻译的方式有两种</strong></p><blockquote><p><strong>一个是编译 另一个是解释 两者的区别在于翻译的时间点不同</strong></p></blockquote><blockquote><p>编译器是在代码执行之前进行编译 生成中间代码文件</p></blockquote><blockquote><p>解释器是在运行时进行及时解释 并立即执行（当编译器以解释方式运行时，也称之为解释器）</p></blockquote><p><strong>标识符：</strong></p><blockquote><p>值开发人员为变量、属性、函数、参数取的名字<br>标识符不能时关键字或保留字</p></blockquote><p><strong>关键字：</strong></p><blockquote><p>JS已经使用了的字 不能用来命名变量</p></blockquote><p><strong>保留字：</strong></p><blockquote><p>现在不是关键字 但未来可能成为关键字 不能用</p></blockquote><p><strong>运算符 operator</strong></p><blockquote><ul><li>算术运算符（+ - * / %）都要敲空格 浮点数算术运算精度问题 不要用浮点数来直接比较大小</li><li>表达式和返回值 数字和运算符和变量 结果为返回值 右边计算完把返回值给左边 </li><li>递增和递减运算符 ++ – 必须和变量一起使用</li><li>前置递增 ++age//age=age+1 先自加1后返回值</li><li>后置递增 age++// 先返回原值 后自加1 开发中后置用的比较多 单独占一行</li></ul></blockquote><p><strong>比较运算符</strong></p><blockquote><ul><li>逻辑运算符 短路运算（逻辑中断）：当有多个表达式（值）可以确定结果时，就不再继续运算右边的表达式的值</li><li>逻辑与短路运算：语法：表达式1&amp;&amp;表达式2 如果表达式1为真则返回表达式2 若为假则返回表达式1</li><li>逻辑或短路运算：若1为真则返回1若1为假则返回2</li></ul></blockquote><blockquote><p>赋值运算符(= += -= *= %= /=)</p></blockquote><p><strong>运算符优先级：</strong></p><blockquote><p><strong>小括号&gt;一元运算符&gt;算术运算符&gt;关系运算符&gt;相等运算符&gt;逻辑运算符&gt;赋值运算符&gt;逗号运算符</strong></p><p><strong>一元运算符里面的逻辑非优先级很高 逻辑与比逻辑或优先级高</strong></p></blockquote><p><strong>流程分支</strong></p><blockquote><p><strong>流程控制：顺序、分支、循环</strong></p></blockquote><p><strong>分支结构：</strong></p><div class="code-wrapper"><pre><code class="hljs">if语句：if(条件表达式)&#123;执行语句&#125;;if else if语句（多分支语句）//利用多个条件来选择不同的语句执行 得到不同的结果 多选1的过程语法规范：if (条件表达式)&#123;语句1&#125;else if (表达式2)&#123;语句2&#125;eles&#123;最后的语句&#125;</code></pre></div><p><strong>三元表达式</strong></p><blockquote><p>有三元运算符组成的式子<br>语法结构：条件表达式 ？ 表达式1 ： 表达式2</p></blockquote><p><strong>switch语句：</strong></p><p><strong>语法结构：</strong></p><div class="code-wrapper"><pre><code class="hljs">switch(表达式)&#123;case value1:执行语句1;break;...default: 执行最后的语句;&#125;//注意事项：//1、在开发中，表达式我们经常写成变量//2、我们num的值和case里面的值和匹配的时候式全等才行</code></pre></div><p><strong>循环结构：</strong></p><blockquote><p>循环的目的：可以重复执行某些代码</p></blockquote><div class="code-wrapper"><pre><code class="hljs">for循环（循环体 终止条件）//通常跟计数有关系for(初始化变量;条件表达式;操作表达式)&#123;循环体&#125;</code></pre></div><blockquote><p>初始化变量：用var声明的一个普通变量 用于作为计数器使用<br>条件表达式：用来决定每一次循环是否继续执行 就是终止的条件<br>操作表达式：每次循环最后执行的代码 经常用于我们计数器变量进行更新（递增或递减）</p></blockquote><blockquote><p>断点调试 观察程序的运行过程 sources (step into next function call) watch<br>循环重复不相同的代码 因为有计数器的存在 每次i的变换循环值都会变化 </p></blockquote><p><strong>双重for循环（循环嵌套）</strong><br><strong>语法结构：</strong></p><div class="code-wrapper"><pre><code class="hljs">for (外层的初始化变量；外层的条件表达式；外层的操作表达式)&#123;for (里层的初始化变量；里层的条件表达式；外层的操作表达式)&#123;    执行语句&#125;&#125;//外层循环循环一次 里面的循环执行全部</code></pre></div><p><strong>while循环</strong><br><strong>语法规则：</strong></p><div class="code-wrapper"><pre><code class="hljs">while （条件表达式）&#123;循环体&#125;//会出现死循环</code></pre></div><p><strong>do…while循环</strong><br><strong>语法：</strong></p><div class="code-wrapper"><pre><code class="hljs">do&#123;循环体&#125;while(条件表达式)//先循环一次 条件满足则继续执行</code></pre></div><p><strong>关键字：</strong></p><div class="code-wrapper"><pre><code class="hljs">continue //跳出本次循环 继续下一次循环break //循环结束</code></pre></div><blockquote><p>while 和 do while 可以做更复杂的判断条件比for更灵活 实际工作中更常用for 更简洁直观</p></blockquote><p><strong>数组:</strong></p><blockquote><p>一组数据的集合 每个数据称为元素 可存放任意类型元素 数据一定要用逗号隔开</p></blockquote><p><strong>创建数组</strong></p><blockquote><p>1、利用new创建 var arr = new Array ();<br>2、利用数组字面量创建 var arr = []; 数组的初始化</p></blockquote><p><strong>访问数组元素</strong> </p><blockquote><ul><li>索引（下标 从0开始）console.log(arr[2]);</li><li>遍历数组（全部取出） 索引值在递增 利用循环</li></ul></blockquote><p><strong>数组的长度</strong></p><blockquote><p>数组名.length (不是元素个数)</p></blockquote><p><strong>数组新增元素</strong></p><blockquote><ul><li>通过修改length的长度 修改长度：多一个为空 少一个为undefined<br>length属性式可读写的</li><li>修改索引号 （就是替换）<br>不能直接给数组名赋值否则数据消失</li></ul></blockquote><p><strong>数组排序（冒泡排序）:</strong> </p><blockquote><p>把一些数据按照一定的顺序进行排序显示</p><blockquote><p>1.一共要交换的趟数（外层for循环）arr.length-1<br>2.每一趟交换次数（里层for循环）arr.length-i-1<br>3.交换2个变量即可</p></blockquote></blockquote><p><strong>函数:</strong></p><blockquote><p>封装了一段可以被重复执行调用的代码块 目的：大量代码重复使用</p><blockquote><p>使用：1、声明函数 2、调用函数 函数名（）<br>函数不调用自己不执行</p></blockquote></blockquote><p><strong>函数的参数：</strong></p><blockquote><p>形参 实参</p></blockquote><div class="code-wrapper"><pre><code class="hljs">function (形参1，形参2...)&#123;&#125; 函数名(实参1，实参2...);</code></pre></div><blockquote><blockquote><p>形参式接收实参的 形参类似于一个变量 函数参数可有可无 个数不限</p></blockquote></blockquote><p><strong>形参和实参的匹配问题</strong> </p><blockquote><p>1.形参与实参的个数一致 则正常输出<br>2.若实参个数&gt;形参个数 取形参个数<br>3.若实参个数&lt;形参个数 NaN (形参默认undifend)</p></blockquote><p><strong>函数的返回值 return 语句：</strong></p><div class="code-wrapper"><pre><code class="hljs">function 函数名()&#123;return 需要返回的结果;&#125;</code></pre></div><blockquote><blockquote><p>1、函数只是实现某种功能 最终结果需要返回给函数的调用者<br>2、只要遇到return 就把后面的结果返回值给函数调用者 函数名()=return 后面的结果<br><strong>在实际开发时 常用一个变量来接收函数返回结果更简洁</strong></p></blockquote></blockquote><p><strong>return 终止函数:</strong></p><blockquote><p>return后面的代码不会去执行<br>return 只能返回一个值 (返回的结果是最后一个值) 也可返回数组<br>没有return 则返回undefined</p></blockquote><div class="code-wrapper"><pre><code class="hljs">break: //结束当前循环 continue://跳出循环 继续执行下次的循环return://可退出循环 也能返回return 语句中的值 同时还可以结束当前函数的代码</code></pre></div><p><strong>argument 的使用：</strong></p><blockquote><p>当不确定有多少个参数传递的时候 用argument来获取 他实际上是当前函数的一个内置对象所有函数都有 argument对象中存储了传递的所有实参 </p></blockquote><p><strong>使用：</strong></p><div class="code-wrapper"><pre><code class="hljs">console.log (argument);</code></pre></div><blockquote><blockquote><p>argument 展示形式为伪数组</p><ul><li>有length属性</li><li>按索引方式储存数据</li><li>不具有数组push pop等 （可遍历）</li></ul></blockquote></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>基础工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown 语法一览</title>
    <link href="/2022/01/06/markdown%E8%AF%AD%E6%B3%95%E4%B8%80%E8%A7%88/"/>
    <url>/2022/01/06/markdown%E8%AF%AD%E6%B3%95%E4%B8%80%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h1 id="markdown-语法"><a href="#markdown-语法" class="headerlink" title="markdown 语法"></a>markdown 语法</h1><h2 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h2><p>要创立标题，在段落前加# 共有六个标题等级</p><h2 id="段落语法"><a href="#段落语法" class="headerlink" title="段落语法"></a>段落语法</h2><p>使用空白行或多行文本进行分隔</p><h2 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h2><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行</p><h2 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h2><h4 id="粗体-bold-："><a href="#粗体-bold-：" class="headerlink" title="粗体(bold)："></a>粗体(bold)：</h4><p>在单词或短语的前后各添加两个星号（asterisks）或下划线（underscores）<br>eg: i just love <strong>bold text</strong></p><h4 id="斜体-ltalic"><a href="#斜体-ltalic" class="headerlink" title="斜体(ltalic):"></a>斜体(ltalic):</h4><p>在单词或短语前后添加一个星号（asterisk）或下划线（underscore)<br>eg:Italicized text is the <em>cat’s meow</em>.</p><h4 id="粗体和斜体："><a href="#粗体和斜体：" class="headerlink" title="粗体和斜体："></a>粗体和斜体：</h4><p>在单词或短语的前后各添加三个星号或下划线<br>eg:This text is <em><strong>really important</strong></em>.</p><h2 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h2><p>要创建块引用，请在段落前添加一个 &gt; 符号 </p><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p></blockquote><h4 id="多个段落的块引用："><a href="#多个段落的块引用：" class="headerlink" title="多个段落的块引用："></a>多个段落的块引用：</h4><p>块引用可以包含多个段落。为段落之间的空白行添加一个 &gt; 符号。</p><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p><p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.  </p></blockquote><h4 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h4><p>块引用可以嵌套。在要嵌套的段落前添加一个 &gt;&gt; 符号</p><h4 id="带有其它元素的块引用"><a href="#带有其它元素的块引用" class="headerlink" title="带有其它元素的块引用"></a>带有其它元素的块引用</h4><p>块引用可以包含其他 Markdown 格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。</p><blockquote><h4 id="The-quarterly-results-look-great"><a href="#The-quarterly-results-look-great" class="headerlink" title="The quarterly results look great!"></a>The quarterly results look great!</h4><ul><li>Revenue was off the chart.</li><li>Profits were higher than ever.</li></ul><p> <em>Everything</em> is going according to <strong>plan</strong>.</p></blockquote><h2 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h2><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。  </p><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+)   </p><ul><li>first item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ul><h4 id="在列表中嵌套其他元素"><a href="#在列表中嵌套其他元素" class="headerlink" title="在列表中嵌套其他元素"></a>在列表中嵌套其他元素</h4><p>要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符.</p><h5 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h5><ul><li><p>  This is the first list item.</p></li><li><p>Here’s the second list item.</p><p>  I need to add another paragraph below the second list item.</p></li><li><p>  And here’s the third list item.</p></li></ul><h5 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h5><ul><li><p>  This is the first list item.</p></li><li><p>Here’s the second list item.</p><blockquote><p>A blockquote would look great below the second list item.</p></blockquote></li><li><p>  And here’s the third list item.</p></li></ul><h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><p>代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符。</p><ol><li><p> Open the file.</p></li><li><p>Find the following code block on line 21:</p><div class="code-wrapper"><pre><code class="hljs"> &lt;html&gt;   &lt;head&gt;     &lt;title&gt;Test&lt;/title&gt;   &lt;/head&gt;</code></pre></div></li><li><p> Update the title to match the name of your website.</p><h5 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h5></li><li><p> Open the file containing the Linux mascot.</p></li><li><p>Marvel at its beauty.</p><p> <img src="%E4%B8%8B%E8%BD%BD.png" alt="Tux, the Linux mascot"></p></li><li><p> Close the file.</p><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5></li><li><p>First item</p></li><li><p>Second item</p></li><li><p>Third item</p><ul><li>Indented item</li><li>Indented item</li></ul></li><li><p>Fourth item</p></li></ol><h2 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h2><p>要将单词或短语表示为代码，请将其包裹在反引号 (`) 中。  </p><p>At the command prompt, type <code>nano</code>.</p><h5 id="转义反引号"><a href="#转义反引号" class="headerlink" title="转义反引号"></a>转义反引号</h5><p>如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(``)中.  </p><p><code>Use `code` in your Markdown file.</code></p><h5 id="代码块-1"><a href="#代码块-1" class="headerlink" title="代码块"></a>代码块</h5><p>要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符。</p><div class="code-wrapper"><pre><code class="hljs">&lt;html&gt;  &lt;head&gt;  &lt;/head&gt;&lt;/html&gt;</code></pre></div><p>Note: 要创建不用缩进的代码块，请使用 围栏式代码块（fenced code blocks）.</p><h2 id="分割线语法"><a href="#分割线语法" class="headerlink" title="分割线语法"></a>分割线语法</h2><p>要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容。</p><p>Try to put a blank line before…</p><hr><p>…and after a horizontal rule.</p><h2 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h2><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。<br>超链接Markdown语法代码：<a href="%E8%B6%85%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" title="超链接title">超链接显示名</a></p><p>这是一个链接 <a href="https://markdown.com.cn/">Markdown语法</a>。</p><h5 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h5><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。  </p><p><a href="https://markdown.com.cn/">https://markdown.com.cn</a><br><a href="mailto:&#102;&#97;&#107;&#x65;&#64;&#101;&#x78;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#99;&#x6f;&#109;">&#102;&#97;&#107;&#x65;&#64;&#101;&#x78;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#99;&#x6f;&#109;</a></p><h5 id="带格式化的链接"><a href="#带格式化的链接" class="headerlink" title="带格式化的链接"></a>带格式化的链接</h5><p>强调 链接, 在链接语法前后增加星号。 要将链接表示为代码，请在方括号中添加反引号。  </p><p>I love supporting the <strong><a href="https://eff.org/">EFF</a></strong>.<br>This is the <em><a href="https://www.markdownguide.org/">Markdown Guide</a></em>.<br>See the section on <a href="#code"><code>code</code></a>.</p><h2 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h2><p>要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。</p><p>插入图片Markdown语法代码：<img src="%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5" alt="图片alt" title="图片title">。</p><h5 id="链接图片"><a href="#链接图片" class="headerlink" title="链接图片"></a>链接图片</h5><p>给图片增加链接，请将图像的Markdown 括在方括号中，然后将链接添加在圆括号中。<br><a href="https://markdown.com.cn/"><img src="%E4%B8%8B%E8%BD%BD.png" alt="沙漠中的岩石图片"></a></p><h2 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h2><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。</p><p>* Without the backslash, this would be a bullet in an unordered list.</p>]]></content>
    
    
    
    <tags>
      
      <tag>基础工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/05/hello-world/"/>
    <url>/2022/01/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
